positionsByRules = {
	fieldPlayerPositionsOwnKickoff = [
		{x = -1000; y = 0;},
		{x = -3500; y = 1000;},
		{x = -3500; y = -1000;},
		{x = -3500; y = 2500;},
		{x = -3500; y = -2500;}
	];
	fieldPlayerPositionsOppKickoff = [
		{x = -2500; y = 0;},
		{x = -3500; y = 1000;},
		{x = -3500; y = -1000;},
		{x = -3500; y = 2500;},
		{x = -3500; y = -2500;}
	];
	xOffsetPenaltyPositions = [ -1500, -2500, -3500 ]; // Only X-Offsets are required (Y is generated by FieldDimensions)
	goaliePosition = {x = -4400; y = 0;};
	penaltyShootoutGoaliePosition = {x = -4500; y = 0;}; // rules say:
		// goalie with its feet on the goal line and in the center of the goal
	penaltyShootStartingRadius = 1000;
	penaltyShootAngles = [ -60, -30, 0, 30, 60 ]; // in degree
};

parameters = {
	processUpdate = {
		odometryBasedVarianceUpdate = false; // Determines whether to update the coVar matrix based on odometry data
		minPositionChageForCovarianceUpdate = 5;
		minRotationChageForCovarianceUpdate = 0.01;
		positionVariance = 80;
		rotationVariance = 0.001;

		// Weight to adjust hypotheses to best fitting angle
		adjustRotationToBestFittingAngle = 0.0;

		// Don't switch robot pose as long as no other hypothesis is that much better
		positionConfidenceHysteresisForKeepingBestHypothesis = 0.15;
		
		// Calculation base of how to fill Jacobians; Possible options: old is "singles", new is "vector" -> vector is broken atm, do not use for now
		jacobianMeasurementCalculation = singles;
	};

	sensorUpdate = {
		verticalAngleVariance = 0.08;
		horizontalAngleVariance = 0.2;
		projectiveNormalVariance = 0.008;
		maxVerticalAngleFullObservationWeight = 1.2;

		correlationFactorBetweenMeasurements = 0.5; // [0..1]
		influenceOfNewCenterCircleMeasurementOnPositionConfidence = 0.007; // [0..1]
		influenceOfNewPenaltyCrossMeasurementOnPositionConfidence = 0.004; // [0..1]
		influenceOfNewGoalMeasurementOnPositionConfidence = 0.003; // [0..1]
		influenceOfNewLineMeasurementOnPositionConfidence = 0.005; // [0..1]
		influenceOfNewInfiniteLineMeasurementOnPositionConfidence = 0.003; // [0..1]
		maxInfluenceOnPositionConfidencePenaltyCrossOnly = 0.2; // [0..1]

		use1stLevelUpdate = true;
		use2ndLevelUpdate = true;
		use3rdLevelUpdate = true;

		minLineLengthOnField = 300.0; // factor 0
		worstAngleDifference = 0.5; // factor 0
		maxDistanceError = 0.2; // (expected dist / real dist) error
		lineLengthMatchFactorMax = 1.2;

		confidenceScaleFactorAfterFallDown = 1; // default 0.75
	};

	symmetryUpdate = {
		updateWithRemoteModels = true;
		maxDistanceToClosestRemoteModel = 500; // max distance between local and remote model for doing symmetry update (in mm)
		influenceOfNewBallMeasurement = 0.05; // [0..1]
		influenceOfNewBallMeasurementByGoalie = 0.1; // [0..1]
		influenceOfNewTeammateRobotMeasurement = 0.02; // [0..1]
		influenceOfNewOpponentRobotMeasurement = 0.00; // [0..1]
	};

	localizationStateUpdate = {
		symmetryLostWhenFallDownInCenterCircle = false; // default 1(true)
		unknownSymmetryRadiusAroundCenter = 200;

		positionLostWhenBestConfidenceBelowThisThreshold = 0.2;
		positionFoundAgainWhenBestConfidenceAboveThisThreshold = 0.5;

		symmetryLostWhenBestConfidenceBelowThisThreshold = 0.2;
		symmetryFoundAgainWhenBestConfidenceAboveThisThreshold = 0.8;
		
		// Define how to handle symmetry; Possible options: "noSymmetricPoses" and "useThresholds"
		
		// [noSymmetricPoses]: Strictly use one pose only and switch confidence to 1 - confidence when mirroring pose.
        // Pose is mirrored when confidence below symmetryLostWhenBestConfidenceBelowThisThreshold.
		// This ignores symmetryFoundAgainWhenBestConfidenceAboveThisThreshold.
		
		// [useThresholds]: Allow two symmetrical poses until best one hits symmetryFoundAgainWhenBestConfidenceAboveThisThreshold.
		// Afterwards, delete the symmetrical pose.
		// A symmetrical pose will spawn once the symmetry confidence is below symmetryLostWhenBestConfidenceBelowThisThreshold.
		// The symmetry confidence of the new pose is the average of the current confidence and symmetryFoundAgainWhenBestConfidenceAboveThisThreshold.
		// new_confidence = (symmetryFoundAgainWhenBestConfidenceAboveThisThreshold + current_confidence) / 2
		// current_confidence will be slightly lower than symmetryLostWhenBestConfidenceBelowThisThreshold.
		symmetryHandling = noSymmetricPoses;
	};

	spawning = {
		// Adding new Hypotheses
		useOdometryForSpawning = false;
		landmarkBasedHypothesesSpawn = spawnIfLostOrTracking;
		spawnWhilePositionTrackingWhenBestConfidenceBelowThisThreshold = 0.45; // [0..1]

	  	// Nearest pose (symmetric vs. own side) is determined by best hypothesis.
  		// This threshold allows other hypothesis with a confidence lower than the best hypothesis
  		// also to be taken into account for check of closest pose when within this interval (best confidence - value)
		// 0 to use best hypothesis only;
  		confidenceIntervalForCheckOfHypothesis = 0.1; // [0..1]

		// 3 hypotheses (2 rotated) at each hypothesis after falling down -> each angleOfAdditionalHypothesisAfterFallDown/no
		noAdditionalHypothesisAfterFallDown = 2;
		angleOfAdditionalHypothesisAfterFallDown = 30deg;

		// Those should not be beyond localizationState_positionLostWhenBestConfidenceBelowThisThreshold
		positionConfidenceWhenPositionedManually = 0.3;
		positionConfidenceWhenPositionedManuallyForGoalKeeper = 0.35;
		positionConfidenceWhenPositionLost = 0.25;

		symmetryConfidenceWhenPositionedManually = 1.0;

		// confidence of new pose is calculated like baseConfidence*perceptConfidence*bestHypothesisConfidence
		goalBaseConfidence = 0.8;
		centerCircleBaseConfidence = 0.8;
		penaltyCrossBaseConfidence = 0.8;

		lineBasedPositionConfidenceWhenPositionTracking = 0.25;
		
		// Time to not spawn if pose is on other side of the field but we are still entering the field (initial or penalized)
		// Set to 0 to disable limitation
		limitSpawningToOwnSideTimeout = 15000;
		
		// Prevent spawning when fallen down again within a certain range
		minDistanceBetweenFallDowns = 750;
		
		// Acc Z difference/peak to consider oneself as picked up and spawn on manual positions in SET state
		accZforPickedUpDifference = 4.0;
	};

	pruning = {
		likelihoodTresholdForMerging = 0.5;
		maxNumberOfHypotheses = 12;
	};

	matching = {
		positionVarianceForLines = 250000;
		orientationVarianceForLines = 0.25;
		likelihoodTresholdForLines = 0.1;

		maxAllowedVerticalAngleDifferenceForPoints = 0.3;
		maxAllowedHorizontalAngleDifferenceForPoints = 0.3;
	};

	sensorReset = {
		maxDistanceForLocalResetting = 100;
		maxAngleForLocalResetting = 0.8;
	};

	debugging = {
		// The duration (in ms) to highlight (paint red) newly added hypotheses
		durationHighlightAddedHypothesis = 5000;
		displayWarnings = false;
	};

};
