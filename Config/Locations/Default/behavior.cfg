//for goto
gotoThreshMaxTime = 1000;
gotoBaseThresh = 80;
gotoBaseThreshRot = 10deg;
// localization
isLocalizedMinValidity = 0.2;
isLocalizedNoSymmetrie = false;
noWLAN = false; //activate behavior w/o WLAN
// for kicks
optDistanceToBallX = 160;
optDistanceToBallY = 55;
optKickoffDistanceToBallX = 180;
optKickoffDistanceToBallY = 43;

targetDistanceRobotRotFactor = 10;
targetDistRobotToTargetAngleFactor = 2;
targetDistanceObstacleFactor = 1;  

behaviorParameters = {
  headControlVersion = HC2014;
  
  behaviorTestmode = false; // NEVER set true for competition
  
  useDefensiveBallSearch = false;
  // if (ownScore - oppScore >= ?) use defensive behavior
  // disable one behavior by setting greater 10 (mercy rule)
  defensiveBehaviorScoreDiff = -10;
  useBlockForFieldPlayers = false;
  goalieSaveFriction = -0.12;
  useMarking = false;
  useBlindSideKick = true;
  useWEDribbling = false;
  longKick = kickMiddleFast;
  longKickStable = kickMiddle;
  
  useWalkKickForKickoff = true;
  neverDribbleForKickoff = false;
  
  kickOffToTheLeftSide = true;
  useDynamicKickoffSideSwitching = true;
  initialWalkInTime = 5000;
  initialWalkInSpeed = 150;
  
  kickOffLineDistance = 300;
  passReceiverKickOffPosition = {x = -450; y = 1250;};
  offSupporterKickOffDefensePosition = {x = -1000; y = 1000;};
  
  // constraints: {minX; maxX; minY; maxY;}
  ballchaserPositionConstraints =  {minX =  1000; maxX =  3500; minY = -1000; maxY =  1000;};
  centerPositionConstraints = {minX = -2000; maxX =  1500; minY =   -500; maxY =  1000;};
  defenderLeftPositionConstraints = {minX = -3000; maxX = -1000; minY = -1500; maxY =  0;};
  defenderRightPositionConstraints = {minX = -3000; maxX = -1000; minY = 0; maxY =  1500;};
  defenderSinglePositionConstraints = {minX = -3700; maxX = -2500; minY = -1200; maxY =  1200;};
  positionConflictDistance = 500;
  
  // set play parameters
  // the radius of the area that can not be entered when defending a free kick
  freeKickCircleRadius = 750; 
  kickForFreeKicks = kickMiddle;
};

penaltyShootout2017Parameters = {

  striker = {
	  probabilityToKickLeft = 0.5; // must be in [0,1]
    optDistanceToBallX = 185;
    optDistanceToBallY = 45;
	  rotation = 19deg;
    kickIdKickLeft = kickMiddle;
    mirrorKickLeft = false; // <=> kick with right foot	
    kickIdKickRight = kickMiddle;
    mirrorKickRight = false; // <=> kick with right foot
    correctPosition = true;
    durationInSecs = 30;
    secsToKick = 10;
    // Wait until position confidence higher than that before starting
    positionConfidenceBeforeStarting = 0.5;
    // Max seconds to wait for confidence reaching 'positionConfidenceBeforeStarting'
    maxSecsToLocalize = 5;
	  maxXDeviationFrontForKick = 8; // treshhold for kick
	  maxXDeviationBackForKick = 15; // treshhold for kick
	  maxYDeviationForKick = 5; // treshhold for kick
	  maxAngleDeviationForKick = 2deg;
  };

  goalie = {
	// DEPRECATED: used for old keeper (see PenaltyKeeper2017.h)
    	// currently PSGoalTrigger.h/cpp and PenaltyKeeper.h is used.
    xOffsetFromPenaltyArea = 100;
    // Trigger safety motion if ball is closer than this
    distToBallForTrigger = 700;
    // Trigger in secs, not ms
    timeLeftPSForTrigger = 5;
    velOfBallForTrigger = -100;
    // The speed with which to step forward
    stepForwardSpeed = 100;
    // The time [in ms] to step forward
    stepForwardDuration = 3500;
		// own distTrigger because goalie does not walk forward
    useGoalieDiveBehavior = true; 
    distToBallForTriggerDive = 1100;
    blockArea = 50; // low for testing, TODO try to raise later to about 200
    useSpeculativeMode = false;
    checkRobotAtTimeSpeculative = 16000;
  };

};

