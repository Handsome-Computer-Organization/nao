#ifdef CNN_TEST
#define CNN_STOPWATCH(name) // STOPWATCH(name)
#else
#define CNN_STOPWATCH(name)
#endif

// includes
#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wconversion"
#endif

#include <emmintrin.h>

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#include <math.h>

// buffers
alignas(16) float x2_WEIGHTS[] = { 0.07104600220918655f, -0.06646999716758728f, 0.08230499923229218f, -0.1280979961156845f, -0.05285999923944473f, 0.1391250044107437f, -0.022482000291347504f, -0.12212499976158142f, 0.12013699859380722f, -0.12728999555110931f, 0.05962799862027168f, -0.08941599726676941f, 0.08044300228357315f, 0.11550399661064148f, 0.04284299910068512f, -0.13175900280475616f, 0.13058699667453766f, -0.1861329972743988f, -0.0432949997484684f, -0.12619100511074066f, -0.013271000236272812f, 0.08634000271558762f, -0.03192799910902977f, -0.23116299510002136f, 0.10618700087070465f, -0.13571999967098236f, -0.05326500162482262f, -0.21615199744701385f, -0.033041998744010925f, -0.08247099816799164f, 0.0801829993724823f, 0.3155440092086792f, 0.1372009962797165f, 0.0033760000951588154f, 0.015038999728858471f, -0.0431860014796257f, -0.14840300381183624f, -0.05897299945354462f, -0.04398699849843979f, -0.2382490038871765f, 0.13260400295257568f, 0.041777998208999634f, -0.05959499999880791f, 0.12974199652671814f, -0.1155959963798523f, 0.1991720050573349f, -0.1623840034008026f, -0.0872810035943985f, 0.01680300012230873f, -0.04437299817800522f, -0.134553000330925f, 0.13617399334907532f, 0.09094300121068954f, -0.014814999885857105f, -0.04959600046277046f, 0.1939300000667572f, -0.013012999668717384f, -0.037372998893260956f, -0.20032300055027008f, 0.10247799754142761f, 0.06852199882268906f, -0.09468100219964981f, -0.04986799880862236f, 0.3675589859485626f, -0.006178999785333872f, 0.0755700021982193f, -0.11072999984025955f, -0.03711400181055069f, 0.18631599843502045f, -0.17211300134658813f, 0.1403850018978119f, 0.4271619915962219f, 0.0628959983587265f, 0.1569799929857254f, -0.0663750022649765f, 0.0310210008174181f, -0.0820470005273819f, -0.06666599959135056f, 0.026706000789999962f, -0.10170099884271622f, 0.0977960005402565f, -0.10944300144910812f, -0.014782000333070755f, 0.017558999359607697f, -0.05533299967646599f, 0.1006689965724945f, -0.15773999691009521f, -0.014209999702870846f, -0.07664799690246582f, -0.1028980016708374f, -0.21081599593162537f, -0.08092399686574936f, 0.018933000043034554f, 0.054384998977184296f, -0.07658299803733826f, 0.013300999999046326f, -0.17244599759578705f, -0.03794899955391884f, -0.1836490035057068f, -0.07204300165176392f, 0.060366999357938766f, -0.06293799728155136f, -0.03968600183725357f, -0.0882439985871315f, -0.1363999992609024f, 0.08133599907159805f, -0.2511810064315796f, -0.1988849937915802f, 0.2655380070209503f, -0.18698300421237946f, 0.16986200213432312f, -0.10750699788331985f, -0.005671000108122826f, 0.02212199941277504f, -0.06386099755764008f, -0.0770760029554367f, 0.20625700056552887f, -0.03328699991106987f, -0.004124999977648258f, 0.06601700186729431f, 0.008918999694287777f, 0.021405000239610672f, 0.027379000559449196f, 0.21011899411678314f, -0.12008900195360184f, -0.02899700030684471f, -0.14855200052261353f, -0.10050199925899506f, -0.09036300331354141f, 0.1406880021095276f, 0.019082000479102135f, 0.21435700356960297f, -0.08324799686670303f, 0.07161100208759308f, 0.025157000869512558f, -0.0072280000895261765f, -0.17113199830055237f, 0.08666499704122543f, -0.1164029985666275f, 0.13085299730300903f, -0.1374419927597046f, 0.04848900064826012f, 0.005408999975770712f, -0.06983999907970428f, -0.1924010068178177f, 0.09842800348997116f, -0.09685499966144562f, -0.016852999106049538f, -0.07939700037240982f, -0.08306500315666199f, 0.11972799897193909f, -0.23521000146865845f, -0.01885100081562996f, 0.05350999906659126f, -0.02364799939095974f, -0.04318299889564514f, 0.07125599682331085f, 0.0711119994521141f, 0.05363199859857559f, -0.48843899369239807f, 0.06270100176334381f, -0.000590000010561198f, 0.07114499807357788f, -0.13953599333763123f, -0.05454700067639351f, -0.03181000053882599f, 0.004989999812096357f, -0.12567299604415894f, 0.03276799991726875f, 0.06832300126552582f, 0.0510919988155365f, -0.0706700012087822f, -0.03548000007867813f, 0.05254799872636795f, 0.08870600163936615f, 0.03280999884009361f, -0.04564100131392479f, -0.035399001091718674f, -0.03151300176978111f, 0.19064299762248993f, -0.1683730036020279f, -0.035982999950647354f, -0.020952999591827393f, 0.06142599880695343f, -0.005979999899864197f, 0.07074300199747086f, 0.024901000782847404f, 0.06606800109148026f, 0.011245000176131725f, -0.04609600082039833f, 0.09145600348711014f, 0.0485990010201931f, 0.0374159999191761f, -0.07219500094652176f, 0.06198100000619888f, -0.0032259998843073845f, -0.027540000155568123f, 0.07721800357103348f, -0.04003499820828438f, 0.39223501086235046f };
alignas(16) float x2_BIAS[] = { -0.09322299808263779f, 0.013886000029742718f, 0.0022609999869018793f, -0.009170999750494957f, 0.07631800323724747f, -0.07601600140333176f, -0.14534899592399597f, 0.13718700408935547f };
alignas(16) float x5_WEIGHTS[] = { 0.007277000229805708f, -0.10605499893426895f, -0.014983000233769417f, 0.009188000112771988f, 0.07101999968290329f, -0.02053000032901764f, -0.04428600147366524f, 0.07733000069856644f, 0.21936200559139252f, -0.06691300123929977f, -0.015138000249862671f, -0.13907399773597717f, -0.0925000011920929f, 0.022871999070048332f, -0.004813999868929386f, 0.038079001009464264f, 0.005878999829292297f, 0.03901100158691406f, 0.03901899978518486f, 0.09637700021266937f, 0.00507699977606535f, 0.04460500180721283f, -0.03096799924969673f, -0.11836700141429901f, 0.027354000136256218f, -0.035634998232126236f, 0.0615059994161129f, 0.10776499658823013f, 0.13393400609493256f, -0.05384700000286102f, -0.0006150000263005495f, 0.07794100046157837f, 0.06476700305938721f, 0.12412100285291672f, 0.02463899925351143f, -0.02011900022625923f, 0.03534400090575218f, -0.12474799901247025f, 0.003338000038638711f, -0.010262999683618546f, -0.04148700088262558f, -0.012105000205338001f, 0.11158599704504013f, -0.013024999760091305f, 0.06917499750852585f, -0.0225249994546175f, 0.01992899924516678f, 0.06717900186777115f, 0.06125599890947342f, -0.048280999064445496f, 0.0345739983022213f, -0.03600599989295006f, 0.04148299992084503f, -0.07699400186538696f, -0.06406299769878387f, 0.03453899919986725f, 0.16029800474643707f, -0.05997199937701225f, 0.16293500363826752f, 0.023202000185847282f, 0.05645500123500824f, 0.010487000457942486f, 0.05408399924635887f, -0.010135999880731106f, -0.07154600322246552f, -0.1496499925851822f, -0.07688300311565399f, 0.10482999682426453f, -0.03367999941110611f, -0.15458300709724426f, -0.020457999780774117f, 0.07249300181865692f, 0.035100001841783524f, 0.014293000102043152f, -0.03954600170254707f, 0.01496300008147955f, 0.04281900078058243f, 0.0005109999910928309f, -0.022616999223828316f, -0.01673099957406521f, -0.04622500017285347f, 0.03991600126028061f, -0.13314999639987946f, 0.00891599990427494f, -0.05014900118112564f, 0.03277900069952011f, 0.06887000054121017f, -0.0012989999959245324f, -0.01821500062942505f, 0.021045999601483345f, -0.029371999204158783f, 0.044711001217365265f, -0.02510800026357174f, -0.004348999820649624f, -0.06194800138473511f, 0.09831900149583817f, -0.18341399729251862f, -0.025212999433279037f, -0.021657999604940414f, -0.11296600103378296f, -0.11761099845170975f, -0.07130199670791626f, -0.12325800210237503f, 0.07074400037527084f, -0.18953000009059906f, 0.022173000499606133f, -0.054134998470544815f, -0.06940100342035294f, 0.08475500345230103f, -0.05404900014400482f, 0.05335500091314316f, -0.055449001491069794f, -0.051454998552799225f, 0.012523000128567219f, -0.0659559965133667f, -0.0070130000822246075f, -0.10027699917554855f, 0.07893799990415573f, -0.0542990006506443f, 0.15196800231933594f, -0.03480200096964836f, 0.062022000551223755f, -0.02738800086081028f, -0.0802370011806488f, -0.018585000187158585f, -0.015749000012874603f, 0.011808999814093113f, 0.006543000228703022f, -0.0625540018081665f, 0.030236000195145607f, 0.013043999671936035f, 0.027122000232338905f, -0.11038099974393845f, 0.08857300132513046f, -0.03392000123858452f, -0.01839599944651127f, -0.05800100043416023f, -0.13969099521636963f, 0.1554269939661026f, 0.03797199949622154f, 0.03375300019979477f, 0.03855900093913078f, 0.04665299877524376f, 0.008710999973118305f, -0.04705800116062164f, 0.2759630084037781f, 0.037845999002456665f, -0.043563999235630035f, -0.0012359999818727374f, -0.11890900135040283f, -0.08160900324583054f, -0.07910499721765518f, -0.06522700190544128f, -0.046084001660346985f, -0.06190099939703941f, -0.062401000410318375f, -0.1373700052499771f, -0.019710000604391098f, -0.03767300024628639f, -0.0778070017695427f, 0.06218700110912323f, -0.007172000128775835f, -0.13538600504398346f, -0.0871649980545044f, 0.08643899857997894f, -0.14383099973201752f, -0.009219000115990639f, -0.034189000725746155f, 0.046852000057697296f, 0.052067000418901443f, -0.015531999990344048f, 0.06986699998378754f, 0.07959099858999252f, 0.059126999229192734f, -0.0842830017209053f, -0.19545599818229675f, -0.0793209969997406f, 0.00853199977427721f, -0.0011879999656230211f, -0.07568100094795227f, -0.11369699984788895f, 0.03125299885869026f, -0.01977499946951866f, -0.015142999589443207f, -0.002377999946475029f, -0.06833499670028687f, -0.06765999644994736f, -0.10433200001716614f, -0.0706849992275238f, -0.12099599838256836f, -0.022846000269055367f, -0.033647000789642334f, 0.031296998262405396f, -0.025098999962210655f, 0.03509499877691269f, -0.30477699637413025f, 0.21793100237846375f, -0.031168000772595406f, 0.0846100002527237f, -0.03052699938416481f, 0.01317100040614605f, -0.0675949975848198f, 0.018712999299168587f, 0.04012100026011467f, 0.13824999332427979f, -0.1371850073337555f, 0.06794799864292145f, 0.10129500180482864f, 0.00430600019171834f, 0.09532099962234497f, 0.028994999825954437f, -0.04709000140428543f, -0.016519000753760338f, -0.04253799840807915f, 0.04280000180006027f, -0.059891000390052795f, -0.11016499996185303f, -0.02225000038743019f, -0.054767999798059464f, 0.04345399886369705f, -0.0030849999748170376f, -0.01139300037175417f, 0.03513000160455704f, 0.03220000118017197f, 0.05393600091338158f, -0.001918999943882227f, 0.087909996509552f, -0.001509999972768128f, -0.06511999666690826f, 0.048232998698949814f, 0.09217599779367447f, 0.09605100005865097f, -0.19109800457954407f, -0.14875899255275726f, -0.0622280016541481f, 0.11378700286149979f, 0.0011690000537782907f, 0.14428900182247162f, -0.06564000248908997f, -0.0789019986987114f, 0.07784400135278702f, 0.05008799955248833f, 0.03757200017571449f, -0.09388399869203568f, -0.08696799725294113f, -0.08691400289535522f, -0.022060999646782875f, 0.05645899847149849f, -0.12410400062799454f, 0.05377599969506264f, -0.05877099931240082f, -0.012248000130057335f, -0.16934700310230255f, -0.004585000220686197f, -0.06633699685335159f, -0.06512799859046936f, -0.05875999853014946f, -0.0221599992364645f, 0.01845799945294857f, -0.05518899857997894f, 0.13620199263095856f, -0.12846800684928894f, 0.06324499845504761f, -0.011560999788343906f, -0.09362400323152542f, -0.033677998930215836f, -0.02764900028705597f, -0.21271400153636932f, 0.04872699826955795f, 0.08392299711704254f, 0.07052800059318542f, -0.10877600312232971f, -0.08007699996232986f, 0.02586499974131584f, -0.04986099898815155f, -0.04034300148487091f, 0.034623000770807266f, -0.016467999666929245f, 0.029766999185085297f, -0.0443589985370636f, 0.02966099977493286f, 0.055201999843120575f, 0.03549500182271004f, 0.1387919932603836f, 0.011540000326931477f, -0.24465900659561157f, 0.013655000366270542f, 0.022847000509500504f, 0.01680699922144413f, -0.02593499980866909f, 0.08188900351524353f, -0.07804100215435028f, 0.0357929989695549f, 0.031156999990344048f, -0.092228002846241f, -0.006897000130265951f, 0.009917999617755413f, 0.016547000035643578f, -0.02491299994289875f, 0.074194997549057f, -0.028220999985933304f, 0.030875999480485916f, 0.01490699965506792f, 0.0230919998139143f, 0.07904800027608871f, -0.01607000082731247f, -0.04640199989080429f, -0.05356299877166748f, 0.11758200079202652f, 0.05777199938893318f, 0.018727000802755356f, 0.04703500121831894f, -0.01590600050985813f, -0.04526200145483017f, 0.014658000320196152f, -0.06022400036454201f, 0.042399998754262924f, 0.041829999536275864f, 0.016366999596357346f, 0.019001999869942665f, 0.10087700188159943f, 0.1255279928445816f, 0.023833999410271645f, -0.05059799924492836f, -0.047322001308202744f, -0.06789399683475494f, -0.03463299944996834f, -0.018573999404907227f, 0.035144999623298645f, -0.027876000851392746f, -0.09441100060939789f, -0.043724000453948975f, -0.00623599998652935f, -0.01894799992442131f, -0.05159899964928627f, -0.08316600322723389f, 0.025059999898076057f, -0.007833000272512436f, 0.003123000031337142f, -0.005565000232309103f, -0.13165700435638428f, 0.04636099934577942f, 0.015975000336766243f, 0.01786700077354908f, -0.05922500044107437f, -0.048976000398397446f, -0.03559599816799164f, -0.1400430053472519f, -0.025098999962210655f, 0.05132000148296356f, 0.0010300000431016088f, -0.03565099835395813f, -0.09399300068616867f, 0.05211300030350685f, 0.007876000367105007f, 0.026933999732136726f, -0.0055680000223219395f, -0.004701000172644854f, -0.0920180007815361f, -0.06336899846792221f, 0.06451400369405746f, 0.020871000364422798f, 0.012387000024318695f, 0.03844299912452698f, -0.026830000802874565f, -0.0962970033288002f, 0.07514899969100952f, 0.09163200110197067f, 0.018107999116182327f, -0.007550999987870455f, -0.02983199991285801f, 0.08354700356721878f, -0.04739399999380112f, 0.071383997797966f, -0.0031389999203383923f, -0.05323600023984909f, 0.025723999366164207f, -0.003240999998524785f, 0.03625600039958954f, -0.09959500283002853f, -0.057806000113487244f, 0.014693000353872776f, 0.014669000171124935f, 0.037606000900268555f, -0.2732290029525757f, -0.02015399932861328f, 0.026792999356985092f, -0.028111999854445457f, -0.00633700005710125f, 0.04084800183773041f, 0.014533000066876411f, -0.05910100042819977f, -0.016116999089717865f, -0.1334419995546341f, 0.043466001749038696f, 0.02462100051343441f, -0.09268499910831451f, -0.130948007106781f, -0.0295570008456707f, 0.19559000432491302f, 0.007379999849945307f, 0.1738719940185547f, 0.07548300176858902f, -0.02230199985206127f, -0.16508500277996063f, -0.06147800013422966f, 0.04033900052309036f, -0.08210600167512894f, -0.16678500175476074f, -0.009850000031292439f, 0.010906999930739403f, 0.1524379998445511f, -0.08766999840736389f, 0.03444699943065643f, -0.022662999108433723f, -0.017055999487638474f, -0.07252199947834015f, 0.036823999136686325f, 0.06803300231695175f, -0.12037300318479538f, -0.1008479967713356f, -0.11898799985647202f, 0.03313000127673149f, -0.11773800104856491f, -0.01994599960744381f, -0.13131199777126312f, -0.03977400064468384f, -0.1081399992108345f, -0.05106800049543381f, 0.039772000163793564f, 0.1459980010986328f, 0.12546700239181519f, -0.023930000141263008f, -0.010995999909937382f, 0.014220000244677067f, -0.14214199781417847f, -0.05027199909090996f, 0.045162998139858246f, -0.05634799972176552f, 0.04016700014472008f, -0.09017100185155869f, 0.05301100015640259f, 0.0007350000087171793f, 0.045465998351573944f, 0.0015300000086426735f, 0.0476440005004406f, -0.0408330000936985f, 0.22112099826335907f, -0.08303199708461761f, 0.14736199378967285f, -0.03119399957358837f, -0.05960400030016899f, 0.05276799947023392f, 0.11879199743270874f, 0.05238800123333931f, -0.19915799796581268f, -0.0035099999513477087f, -0.06920800358057022f, -0.046994999051094055f, -0.020831000059843063f, -0.08613999933004379f, -0.007286999840289354f, -0.0705299973487854f, -0.03207400068640709f, -0.07711999863386154f, 0.05433899909257889f, 0.0397690013051033f, -0.20992900431156158f, 0.00031400000443682075f, -0.1096239984035492f, 0.06512600183486938f, -0.0036349999718368053f, -0.030482999980449677f, 0.04510200023651123f, 0.05411799997091293f, 0.1000090017914772f, -0.03455600142478943f, -0.04678000137209892f, 0.036844998598098755f, -0.1056789979338646f, 0.19506500661373138f, -0.041478998959064484f, -0.029875999316573143f, 0.11661399900913239f, -0.03652700036764145f, -0.0496320016682148f, 0.11513499915599823f, -0.07545500248670578f, -0.04062899947166443f, -0.04820999875664711f, -0.03711799904704094f, -0.07958099991083145f, 0.049486998468637466f, 0.12737999856472015f, -0.07573699951171875f, -0.1557610034942627f, -0.0029959999956190586f, 0.012032000347971916f, 0.09915699809789658f, -0.01891399919986725f, 0.03699500113725662f, -0.03915899991989136f, -0.02328299917280674f, -0.02407900057733059f, 0.24891099333763123f, -0.028808999806642532f, -0.03225399926304817f, -0.012323999777436256f, 0.006341000087559223f, 0.08275400102138519f, 0.013057000003755093f, -0.0798960030078888f, -0.021330000832676888f, -0.04906700178980827f, 0.05206400156021118f, 0.045333001762628555f, 0.017423000186681747f, -0.027377000078558922f, -0.09042999893426895f, 0.04378199949860573f, 0.06923899799585342f, -0.03004699945449829f, -0.16478799283504486f, 0.08881399780511856f, -0.036674998700618744f, 0.05921899899840355f, -0.01578100025653839f, 0.043074000626802444f, 0.022691000252962112f, -0.17456400394439697f, -0.03822600096464157f, 0.05720200017094612f, 0.11080200225114822f, -0.06266699731349945f, -0.051993001252412796f, -0.009751999750733376f, -0.0670899972319603f, -0.04980900138616562f, 0.06354600191116333f, -0.03886000066995621f, 0.1379539966583252f, 0.04354799911379814f, 0.004499000031501055f, 6.600000051548705e-05f, 0.04506399855017662f, -0.02144799940288067f, 0.08947700262069702f, -0.08356799930334091f, -0.017285000532865524f, 0.03288000077009201f, -0.03352300077676773f, -0.10204900056123734f, 0.07598099857568741f, -0.03535899892449379f, -0.07582300156354904f, 0.3175109922885895f, -0.1255439966917038f, -0.04180299863219261f, -0.028488999232649803f, -0.042520999908447266f, 0.04906199872493744f, -0.08537500351667404f, -0.029103999957442284f, -0.06411299854516983f, 0.03106600046157837f, -0.03528600186109543f, 0.006378999911248684f, -0.09427399933338165f, 0.07526499778032303f, -0.017424000427126884f, 0.029417000710964203f, -0.03706299886107445f, 0.027765000239014626f, -0.04558800160884857f, 0.005462999921292067f, 0.00686099985614419f, -0.019419999793171883f, 0.015637999400496483f, -0.06002200022339821f, 0.035169001668691635f, -0.16781499981880188f, 0.07746399939060211f, 0.045263998210430145f, -0.018081000074744225f, 0.18018999695777893f, -0.09333200007677078f, 0.006200999952852726f, 0.0335410013794899f, -0.018792999908328056f, 0.007817000150680542f, 0.0790719985961914f, 0.02806599996984005f, -0.0009879999561235309f, -0.0392180010676384f, 0.025520000606775284f, -0.10737799853086472f, -0.019231999292969704f, 0.11673299968242645f, -0.02950900048017502f, -0.03816299885511398f, -0.031213000416755676f, -0.06405899673700333f, -0.10402700304985046f, 0.12921899557113647f, -0.028358999639749527f, 0.07331900298595428f, -0.007732999976724386f, 0.00965800043195486f, 0.138824000954628f, -0.14519600570201874f, -0.044109001755714417f, 0.045618001371622086f, 0.003667999990284443f, -0.0014179999707266688f, 0.021595999598503113f, -0.09635700285434723f, -0.04910999909043312f, -0.23506200313568115f, 0.07427000254392624f, 0.0786380022764206f, -0.14922800660133362f, -0.048854000866413116f, 0.04945199936628342f, 0.05108899995684624f, 0.03625499829649925f, 0.013212000019848347f, -0.06161399930715561f, -0.04050400108098984f, -0.08373100310564041f, -0.1353829950094223f, 0.015807000920176506f, 0.13069899380207062f, 0.014902999624609947f, 0.15690100193023682f, -0.14405100047588348f, 0.02284800074994564f, -0.038398999720811844f, -0.06747499853372574f, 0.034963998943567276f, -0.05101900175213814f, -0.020718999207019806f, 0.010220999829471111f, -0.05473800003528595f, 0.061705999076366425f, 0.07463300228118896f, 0.0005649999948218465f, -0.051031000912189484f, 0.22940300405025482f, -0.045180000364780426f, 0.03286600112915039f, 0.0862400010228157f, -0.013976999558508396f, 0.07760600000619888f, 0.0947439968585968f, -0.021172000095248222f, 0.03148199990391731f, -0.17371299862861633f, -0.12089599668979645f, -0.0017989999614655972f, -0.058389998972415924f, -0.007892999798059464f, 0.06063099950551987f, 0.008557000197470188f, -0.04203600063920021f, -0.04293600097298622f, -0.09624599665403366f, 0.042233001440763474f, -0.03750799968838692f, -0.05010399967432022f, 0.007029000204056501f, 0.04024700075387955f, 0.0031190000008791685f, 0.019449999555945396f, 0.007594000082463026f, 0.048516999930143356f, -0.09884700179100037f, 0.24792000651359558f, -0.05751900002360344f, 0.006858000066131353f, -0.08342000097036362f, -0.012179000303149223f, 0.0992090031504631f, -0.0008520000264979899f, -0.05762900039553642f, -0.19130399823188782f, -0.08065599948167801f, -0.08153799921274185f, -0.16930800676345825f, -0.05116700008511543f, 0.014755000360310078f, 0.11972200125455856f, -0.17630299925804138f, -0.16798600554466248f, -0.023643000051379204f, -0.09193100035190582f, 0.15058599412441254f, 0.0008239999879151583f, -0.021770000457763672f, 0.044252000749111176f, -0.029332000762224197f, 0.13526800274848938f, -0.01623399928212166f, 0.026177000254392624f, -0.008725999854505062f, 0.062219999730587006f, -0.022836999967694283f, 0.06489100307226181f, 0.025503000244498253f, 0.010582000017166138f, 0.10089399665594101f, -0.054336000233888626f, 0.042114000767469406f, 0.09926299750804901f, 0.024508999660611153f, -0.03836800158023834f, 0.025064999237656593f, -0.13536399602890015f, -0.0006539999740198255f, -0.12462899833917618f, -0.09860700368881226f, -0.04420600086450577f, -0.07041499763727188f, 0.08045800030231476f, 0.16899800300598145f, 0.09571299701929092f, -0.05340399965643883f, -0.017482999712228775f, 0.08266899734735489f, 0.012577000074088573f, -0.031042000278830528f, -0.15603800117969513f, -0.10620000213384628f, -0.07204300165176392f, 0.04331599920988083f, 0.06827300041913986f, -0.12904900312423706f, -0.07990100234746933f, 0.01602100022137165f, -0.031380001455545425f, -0.057133998721838f, 0.0537169985473156f, -0.04220899939537048f, 0.04540000110864639f, -0.016968000680208206f, 0.11533299833536148f, 0.0026179999113082886f, 0.015337999910116196f, -0.06017399951815605f, -0.16870799660682678f, 0.09274499863386154f, -0.005654999986290932f, 0.01117399986833334f, -0.002254999941214919f, 0.05974699929356575f, 0.02085700072348118f, 0.2751460075378418f, -0.0728909969329834f, -0.019571999087929726f, -0.06478600203990936f, -0.00456500006839633f, -0.008806999772787094f, -0.14466500282287598f, 0.04299699887633324f, -0.06665799766778946f, -0.026664000004529953f, -0.06222200021147728f, 0.06345900148153305f, -0.015869000926613808f, 0.0027809999883174896f, -0.042904000729322433f, -0.03447600081562996f, 0.01614299975335598f, -0.17205199599266052f, -0.052136000245809555f, -0.02292799949645996f, -0.02871299907565117f, -0.05852599814534187f, -0.10652799904346466f, 0.05165499821305275f, -0.046613000333309174f, 0.0778060033917427f, 0.027553999796509743f, -0.12838299572467804f, 0.19509899616241455f, 0.020762000232934952f, -0.08151199668645859f, 0.06038900092244148f, 0.060823000967502594f, -0.07574699819087982f, -0.011355999857187271f, -0.013868000358343124f, -0.1515049934387207f, -0.02964399941265583f, 0.006552999839186668f, 0.03678100183606148f, 0.06903800368309021f, -0.0739310011267662f, 0.05942700058221817f, 0.04917500168085098f, 0.11031699925661087f, -0.15447799861431122f, 0.02402300015091896f, 0.0601079985499382f, 0.04497399926185608f, -0.060412000864744186f, 0.05281500145792961f, 0.0079969996586442f, -0.08316600322723389f, -0.007474000100046396f, 0.16187399625778198f, -0.05351100116968155f, -0.049626000225543976f, -0.15210700035095215f, -0.01550500001758337f, -0.0779770016670227f, 0.0464709997177124f, 0.10491900146007538f, 0.08813299983739853f, -0.022086000069975853f, -0.06165299937129021f, -0.07962000370025635f, -0.05866999924182892f, -0.032770998775959015f, -0.046438999474048615f, -0.10439600050449371f, -0.07089100033044815f, 0.05419500172138214f, 0.04119100049138069f, -0.10273200273513794f, -0.008584000170230865f, -0.031881000846624374f, 0.04688100144267082f, -0.023914000019431114f, -0.05282000079751015f, -0.16785000264644623f, -0.061191998422145844f, 0.10472799837589264f, 0.11556600034236908f, -0.06916099786758423f, 0.07096300274133682f, -0.09182000160217285f, 0.16675099730491638f, -0.05512800067663193f, -0.07132700085639954f, 0.13458800315856934f, -0.1353980004787445f, 0.024438999593257904f, -0.021990999579429626f, -0.05087700113654137f, -0.10617999732494354f, 0.00026199998683296144f, -0.04573800042271614f, -0.0354980006814003f, 0.06500999629497528f, 0.062254998832941055f, -0.038075998425483704f, 0.01167600043118f, -0.09154299646615982f, -0.022863000631332397f, -0.038329001516103745f, 0.02788499929010868f, 0.01775199919939041f, -0.016015000641345978f, -0.0003800000122282654f };
alignas(16) float x5_BIAS[] = { -0.3353550136089325f, 0.7530590295791626f, 0.018566999584436417f, -0.5008220076560974f, -0.3878139853477478f, 0.8136659860610962f, 0.36348798871040344f, 0.6117680072784424f, -0.2500019967556f, -0.283843994140625f, 0.8724629878997803f, -0.4064030051231384f };
alignas(16) float x7_WEIGHTS[] = { -0.0022598851937800646f, 0.002861960092559457f, 0.0f, 0.0f, 0.00045173161197453737f, -0.0004078248457517475f, 0.0f, 0.0f, -0.0008309864206239581f, 0.0007617959636263549f, 0.0f, 0.0f, -0.0016529459971934557f, 0.0018940389854833484f, 0.0f, 0.0f, -0.001814463408663869f, 0.001825199113227427f, 0.0f, 0.0f, 0.00153126020450145f, -0.002043067943304777f, 0.0f, 0.0f, 0.0021999843884259462f, -0.0022429709788411856f, 0.0f, 0.0f, 0.001636864384636283f, -0.0013713204534724355f, 0.0f, 0.0f, -0.00274207117035985f, 0.0034646051935851574f, 0.0f, 0.0f, -0.0013426188379526138f, 0.0011102897115051746f, 0.0f, 0.0f, 0.0019293571822345257f, -0.001821474521420896f, 0.0f, 0.0f, -0.0026425577234476805f, 0.00245584431104362f, 0.0f, 0.0f, -0.0030611620750278234f, 0.002929266542196274f, 0.0f, 0.0f, 0.0011288688983768225f, -0.0010028451215475798f, 0.0f, 0.0f, -0.002305281814187765f, 0.0023692138493061066f, 0.0f, 0.0f, -0.0025461555924266577f, 0.0025465062353760004f, 0.0f, 0.0f, -0.002289068652316928f, 0.002515613567084074f, 0.0f, 0.0f, 0.0019400930032134056f, -0.0026388769038021564f, 0.0f, 0.0f, -0.0006908089271746576f, 0.0007292383234016597f, 0.0f, 0.0f, 0.002508515026420355f, -0.002953586168587208f, 0.0f, 0.0f, -0.0016231490299105644f, 0.002057002391666174f, 0.0f, 0.0f, -0.00196401821449399f, 0.0025421681348234415f, 0.0f, 0.0f, 0.0018120532622560859f, -0.0025407220236957073f, 0.0f, 0.0f, -0.002130750101059675f, 0.0018644173396751285f, 0.0f, 0.0f, -0.0018329113954678178f, 0.0017189376521855593f, 0.0f, 0.0f, 0.0016441384796053171f, -0.0022349958308041096f, 0.0f, 0.0f, 0.002681206213310361f, -0.002555182436481118f, 0.0f, 0.0f, -0.0023643500171601772f, 0.002124615479260683f, 0.0f, 0.0f, -0.0012411336647346616f, 0.0011048560263589025f, 0.0f, 0.0f, 0.003603248856961727f, -0.0040779416449368f, 0.0f, 0.0f, 0.0021294793114066124f, -0.0017071941401809454f, 0.0f, 0.0f, 0.001991931116208434f, -0.0014402040978893638f, 0.0f, 0.0f, -0.0031646189745515585f, 0.0032447646372020245f, 0.0f, 0.0f, 0.00013881907216273248f, -0.0002012175536947325f, 0.0f, 0.0f, 0.0007609633612446487f, -0.0010368487564846873f, 0.0f, 0.0f, -0.0020642324816435575f, 0.0027415889780968428f, 0.0f, 0.0f, -0.0017669196240603924f, 0.0023973018396645784f, 0.0f, 0.0f, 0.0018486423650756478f, -0.0023319239262491465f, 0.0f, 0.0f, 0.0011041987454518676f, -0.001933607622049749f, 0.0f, 0.0f, -0.0031646632123738527f, 0.0021731231827288866f, 0.0f, 0.0f, -0.002274915110319853f, 0.002345989691093564f, 0.0f, 0.0f, 0.003096918575465679f, -0.0036321256775408983f, 0.0f, 0.0f, 0.0014488801825791597f, -0.0017173601081594825f, 0.0f, 0.0f, 0.002990131266415119f, -0.003052704967558384f, 0.0f, 0.0f, -0.0027089000213891268f, 0.002035706304013729f, 0.0f, 0.0f, -0.004180872812867165f, 0.004002748057246208f, 0.0f, 0.0f, 0.0033222364727407694f, -0.003067735116928816f, 0.0f, 0.0f, -0.0028432055842131376f, 0.0021039764396846294f, 0.0f, 0.0f };
alignas(16) float x7_BIAS[] = { 0.09210540354251862f, -0.09210540354251862f };

void cnn_ball_matlab_keras_conversion(float *ein, float *out)
{
	float _in[16][16][1];
	for (int i = 0; i < 16; i++)
		for (int j = 0; j < 16; j++)
			_in[j][i][0] = ein[i * 16 + j] * 256;
	float *in = (float*)&_in[0][0][0];
        alignas(16) float x0[256] = {};
    CNN_STOPWATCH("sequential_1_layer_1")
    {
                // batch normalization
        for (int h = 0; h < 16; h++)
        {
            for (int w = 0; w < 16; w++)
            {
                for (int c = 0; c < 1; c++)
                {
                    float element = in[((h) * (16) * (1) + (w) * (1) + (c))];
                    element = element * 1.003921627998352f + -73.17708587646484f;
                    x0[((h) * (16) * (1) + (w) * (1) + (c))] = element;
                }
            }
        }
    }
        alignas(16) float x1[361] = {};
    CNN_STOPWATCH("sequential_1_layer_2")
    {
                // zeropadding_2d
        for (int h = 0; h < 16; h++)
        {
            int h_out = h + 2;
            for (int w = 0; w < 16; w++)
            {
                int w_out = w + 2;
                for (int c = 0; c < 1; c++)
                {
                    float element = x0[((h) * (16) * (1) + (w) * (1) + (c))];
                    x1[((h_out) * (19) * (1) + (w_out) * (1) + (c))] = element;
                }
            }
        }
    }
        alignas(16) float x2[512] = {};
    CNN_STOPWATCH("sequential_1_layer_3")
    {
                // convolution 2d vec 2 single store
        for (int ix = -0; ix < 19 - 5 + 1 + 0; ix += 2)
        {
            int x_out_1 = (ix + 0) / 2;
            for (int jx = -0; jx < 19 - 5 + 1 + 0; jx += 2)
            {
                int x_out_2 = (jx + 0) / 2;
                int lw = 0;
                for (; lw < 8 - 4; lw += 8)
                {
                                __m128 acc = _mm_load_ps(&x2_BIAS[lw]);
                    __m128 acc2 = _mm_load_ps(&x2_BIAS[lw + 4]);for (int iw = 0; iw < 5; iw++)
                    {
                        int x_1 = ix + iw;
                        if (0 <= x_1 && x_1 < 19)
                        {
                            for (int jw = 0; jw < 5; jw++)
                            {
                                int x_2 = jx + jw;
                                if (0 <= x_2 && x_2 < 19)
                                {
                                    for (int kw = 0; kw < 1; kw++)
                                    {
                                        __m128 w = _mm_load_ps(&x2_WEIGHTS[((iw) * (5) * (1) * (8) + (jw) * (1) * (8) + (kw) * (8) + (lw))]);
                                        __m128 w2 = _mm_load_ps(&x2_WEIGHTS[((iw) * (5) * (1) * (8) + (jw) * (1) * (8) + (kw) * (8) + (lw+4))]);
                                        __m128 x = _mm_load_ps1(&x1[((x_1) * (19) * (1) + (x_2) * (1) + (kw))]);
                                        __m128 y = _mm_mul_ps(x, w);
                                        __m128 y2 = _mm_mul_ps(x, w2);
                                        acc = _mm_add_ps(acc, y);
                                        acc2 = _mm_add_ps(acc2, y2);
                                    }
                                }
                            }
                        }
                    }
                    _mm_stream_ps(&x2[((x_out_1) * (8) * (8) + (x_out_2) * (8) + (lw))], acc);
                    _mm_stream_ps(&x2[((x_out_1) * (8) * (8) + (x_out_2) * (8) + (lw+4))], acc2);
                }
                for (; lw < 8; lw += 4)
                {
                                __m128 acc = _mm_load_ps(&x2_BIAS[lw]);for (int iw = 0; iw < 5; iw++)
                    {
                        int x_1 = ix + iw;
                        if (0 <= x_1 && x_1 < 19)
                        {
                            for (int jw = 0; jw < 5; jw++)
                            {
                                int x_2 = jx + jw;
                                if (0 <= x_2 && x_2 < 19)
                                {
                                    for (int kw = 0; kw < 1; kw++)
                                    {
                                        __m128 w = _mm_load_ps(&x2_WEIGHTS[((iw) * (5) * (1) * (8) + (jw) * (1) * (8) + (kw) * (8) + (lw))]);
                                        __m128 x = _mm_load_ps1(&x1[((x_1) * (19) * (1) + (x_2) * (1) + (kw))]);
                                        __m128 y = _mm_mul_ps(x, w);
                                        acc = _mm_add_ps(acc, y);
                                    }
                                }
                            }
                        }
                    }
                    _mm_stream_ps(&x2[((x_out_1) * (8) * (8) + (x_out_2) * (8) + (lw))], acc);
                }
            }
        }
    }
        alignas(16) float x4[128] = {};
    CNN_STOPWATCH("sequential_1_layer_4")
    {
                // max pooling 2d
        for (int ix = -0; ix < 8 - 2 + 1 + 0; ix += 2)
        {
            int x_out_1 = (ix + 0) / 2;
            for (int jx = -0; jx < 8 - 2 + 1 + 0; jx += 2)
            {
                int x_out_2 = (jx + 0) / 2;
                for (int kx = 0; kx < 8; kx++)
                {
                    float m = -INFINITY;
                    for (int dx = 0; dx < 2; dx++)
                    {
                        for (int dy = 0; dy < 2; dy++)
                        {
                            if ((ix + dx) >= 0 && (ix + dx) < 8 && (jx + dy) >= 0 && (jx + dy) < 8)
                            {
                                float m_ = x2[((ix + dx) * (8) * (8) + (jx + dy) * (8) + (kx))];
                                m = ((m) > (m_) ? (m) : (m_));
                            }
                        }
                    }
                    x4[((x_out_1) * (4) * (8) + (x_out_2) * (8) + (kx))] = m;
                }
            }
        }
    }
    CNN_STOPWATCH("sequential_1_layer_5")
    {
                // leaky relu vec
        #ifndef WINDOWS
        #pragma unroll
        #endif
        for (int i = 0; i < 4 * 4 * 8; i += 4)
        {
            __m128 element = _mm_load_ps(&x4[i]);
                __m128 zero = _mm_setzero_ps();
            element = _mm_max_ps(element, zero);
            _mm_store_ps(&x4[i], element);
        }
    }
        alignas(16) float x5[192] = {};
    CNN_STOPWATCH("sequential_1_layer_6")
    {
                // convolution 2d vec 2
        for (int x_out_1 = 0; x_out_1 < 4; x_out_1++)
        {
            int ix = x_out_1 * 1 - 1;
            for (int x_out_2 = 0; x_out_2 < 4; x_out_2++)
            {
                int jx = x_out_2 * 1 - 1;
                int lw = 0;
                for (; lw < 12 - 3; lw += 4)
                {
                                __m128 bias = _mm_load_ps(&x5_BIAS[lw]);_mm_storeu_ps(&x5[((x_out_1) * (4) * (12) + (x_out_2) * (12) + (lw))], bias);
                }
                for (; lw < 12; lw++)
                {
                                x5[((x_out_1) * (4) * (12) + (x_out_2) * (12) + (lw))] = x5_BIAS[lw];}for (int iw = 0; iw < 3; iw++)
                {
                    int x_1 = ix + iw;
                    if (0 <= x_1 && x_1 < 4)
                    {
                        for (int jw = 0; jw < 3; jw++)
                        {
                            int x_2 = jx + jw;
                            if (0 <= x_2 && x_2 < 4)
                            {
                                for (int kw = 0; kw < 8; kw++)
                                {
                                    __m128 x_in = _mm_load_ps1(&x4[((x_1) * (4) * (8) + (x_2) * (8) + (kw))]);
                                    int lw = 0;
                                    for (; lw < 12 - 3; lw += 4)
                                    {
                                        __m128 w = _mm_loadu_ps(&x5_WEIGHTS[((iw) * (3) * (8) * (12) + (jw) * (8) * (12) + (kw) * (12) + (lw))]);
                                        __m128 y = _mm_mul_ps(x_in, w);
                                        __m128 x_out = _mm_loadu_ps(&x5[((x_out_1) * (4) * (12) + (x_out_2) * (12) + (lw))]);
                                        x_out = _mm_add_ps(x_out, y);
                                        _mm_storeu_ps(&x5[((x_out_1) * (4) * (12) + (x_out_2) * (12) + (lw))], x_out);
                                    }
                                    for (; lw < 12; lw++)
                                    {
                                        x5[((x_out_1) * (4) * (12) + (x_out_2) * (12) + (lw))] += x5_WEIGHTS[((iw) * (3) * (8) * (12) + (jw) * (8) * (12) + (kw) * (12) + (lw))] * x4[((x_1) * (4) * (8) + (x_2) * (8) + (kw))];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
        alignas(16) float x7[48] = {};
    CNN_STOPWATCH("sequential_1_layer_7")
    {
                // max pooling 2d vec
        for (int x_out_1 = 0; x_out_1 < 2; x_out_1++)
        {
            int ix = x_out_1 * 2 - 0;
            for (int x_out_2 = 0; x_out_2 < 2; x_out_2++)
            {
                int jx = x_out_2 * 2 - 0;
                int kx = 0;
                for (; kx < 12 - 4; kx += 8)
                {
                    __m128 m = _mm_set1_ps(-INFINITY);
                    __m128 m2 = _mm_set1_ps(-INFINITY);
                    for (int dx = 0; dx < 2; dx++)
                    {
                        for (int dy = 0; dy < 2; dy++)
                        {
                            if ((ix + dx) >= 0 && (ix + dx) < 4 && (jx + dy) >= 0 && (jx + dy) < 4)
                            {
                                __m128 m_ = _mm_load_ps(&x5[((ix + dx) * (4) * (12) + (jx + dy) * (12) + (kx))]);
                                __m128 m_2 = _mm_load_ps(&x5[((ix + dx) * (4) * (12) + (jx + dy) * (12) + (kx+4))]);
                                m = _mm_max_ps(m, m_);
                                m2 = _mm_max_ps(m2, m_2);
                            }
                        }
                    }
                    _mm_store_ps(&x7[((x_out_1) * (2) * (12) + (x_out_2) * (12) + (kx))], m);
                    _mm_store_ps(&x7[((x_out_1) * (2) * (12) + (x_out_2) * (12) + (kx+4))], m2);
                }
                for (; kx < 12; kx += 4)
                {
                    __m128 m = _mm_set1_ps(-INFINITY);
                    for (int dx = 0; dx < 2; dx++)
                    {
                        for (int dy = 0; dy < 2; dy++)
                        {
                            if ((ix + dx) >= 0 && (ix + dx) < 4 && (jx + dy) >= 0 && (jx + dy) < 4)
                            {
                                __m128 m_ = _mm_load_ps(&x5[((ix + dx) * (4) * (12) + (jx + dy) * (12) + (kx))]);
                                m = _mm_max_ps(m, m_);
                            }
                        }
                    }
                    _mm_store_ps(&x7[((x_out_1) * (2) * (12) + (x_out_2) * (12) + (kx))], m);
                }
            }
        }
    }
    CNN_STOPWATCH("sequential_1_layer_8")
    {
                // leaky relu vec
        #ifndef WINDOWS
        #pragma unroll
        #endif
        for (int i = 0; i < 2 * 2 * 12; i += 4)
        {
            __m128 element = _mm_load_ps(&x7[i]);
                __m128 zero = _mm_setzero_ps();
            element = _mm_max_ps(element, zero);
            _mm_store_ps(&x7[i], element);
        }
    }
    CNN_STOPWATCH("sequential_1_layer_9")
    {
                // convolution 2d vec 2 padded weights
        for (int x_out_1 = 0; x_out_1 < 1; x_out_1++)
        {
            int ix = x_out_1 * 1 - 0;
            for (int x_out_2 = 0; x_out_2 < 1; x_out_2++)
            {
                int jx = x_out_2 * 1 - 0;
                int lw = 0;
                for (; lw < 2 - 3; lw += 4)
                {
                                __m128 bias = _mm_load_ps(&x7_BIAS[lw]);_mm_storeu_ps(&out[((x_out_1) * (1) * (2) + (x_out_2) * (2) + (lw))], bias);
                }
                for (; lw < 2; lw++)
                {
                                out[((x_out_1) * (1) * (2) + (x_out_2) * (2) + (lw))] = x7_BIAS[lw];}for (int iw = 0; iw < 2; iw++)
                {
                    int x_1 = ix + iw;
                    if (0 <= x_1 && x_1 < 2)
                    {
                        for (int jw = 0; jw < 2; jw++)
                        {
                            int x_2 = jx + jw;
                            if (0 <= x_2 && x_2 < 2)
                            {
                                for (int kw = 0; kw < 12; kw++)
                                {
                                    __m128 x_in = _mm_load_ps1(&x7[((x_1) * (2) * (12) + (x_2) * (12) + (kw))]);
                                    int lw = 0;
                                    for (; lw < 2 - 3; lw += 4)
                                    {
                                        __m128 w = _mm_load_ps(&x7_WEIGHTS[((iw) * (2) * (12) * (4) + (jw) * (12) * (4) + (kw) * (4) + (lw))]);
                                        __m128 y = _mm_mul_ps(x_in, w);
                                        __m128 x_out = _mm_loadu_ps(&out[((x_out_1) * (1) * (2) + (x_out_2) * (2) + (lw))]);
                                        x_out = _mm_add_ps(x_out, y);
                                        _mm_storeu_ps(&out[((x_out_1) * (1) * (2) + (x_out_2) * (2) + (lw))], x_out);
                                    }
                                    for (; lw < 2; lw++)
                                    {
                                        out[((x_out_1) * (1) * (2) + (x_out_2) * (2) + (lw))] += x7_WEIGHTS[((iw) * (2) * (12) * (4) + (jw) * (12) * (4) + (kw) * (4) + (lw))] * x7[((x_1) * (2) * (12) + (x_2) * (12) + (kw))];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

#ifdef CNN_TEST

#include <stdio.h>
#include <sys/time.h>

int current_time_micro() {
  struct timeval time;
  gettimeofday(&time, NULL);

  return time.tv_sec * 1000000 + time.tv_usec;
}

int main()
{
    const int IN_DIM = 256;
    const int OUT_DIM = 2;
    const int NUM_RUNS = 100;

    int timings[NUM_RUNS] = {};

    alignas(16) float in[IN_DIM];
    alignas(16) float out[OUT_DIM];

    // read image
    FILE *f = fopen("img.bin", "r");
    fread(&in, sizeof(float), IN_DIM, f);

    int total_elapsed = 0;

    for (int run = 0; run < NUM_RUNS; run++)
    {
        // reset out
        for (size_t i = 0; i < OUT_DIM; i++)
        {
            out[i] = 0.0f;
        }

        // declare variables
        int st, et;

        // run function
        st = current_time_micro();
        cnn(in, out);
        et = current_time_micro();
        int elapsed = et - st;
        timings[run] = elapsed;
        total_elapsed += elapsed;
    }

    printf("values:");
    for (int i = 0; i < OUT_DIM; i++)
    {
        printf(" %f", out[i]);
    }
    printf("\n");

    printf("timings:");
    for (int i = 0; i < NUM_RUNS; i++)
    {
        printf(" %d", timings[i]);
    }
    printf("\n");

    printf("time: %d micro seconds\nruns: %d\naverage: %d micro seconds/run\n", total_elapsed, NUM_RUNS, total_elapsed/NUM_RUNS);

    return 0;
}

#endif