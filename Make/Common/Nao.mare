Nao = cppApplication + {
  dependencies = { "ndevilsbase", "libbhuman", "libgamectrl", "sensorReader" }

  // overwrite platform and c++-compiler for cross compiling
  platform = "Linux"

  if (host == "Win32") { // Even on a 64 Windows host will be Win32
    cppCompiler = "env CCACHE_CPP2=yes ccache clang++ -D__extern_always_inline=inline"
    linker = "$(utilDirRoot)/Buildchain/Windows/bin/ld.exe"
  } else {
    linker = "ld"
  }
  command = "$(linker) -o $(output) --eh-frame-hdr -m elf_i386 -dynamic-linker=/lib/ld-linux.so.2 $(utilDirRoot)/Buildchain/gcc/lib/crt1.o $(utilDirRoot)/Buildchain/gcc/lib/crti.o $(utilDirRoot)/Buildchain/gcc/lib/crtbegin.o $(patsubst %,-L%,$(libPaths)) $(input) $(linkFlags) $(LDFLAGS) $(patsubst %,-l%,$(libs)) $(utilDirRoot)/Buildchain/gcc/lib/libstdc++.so.6.0.21 $(utilDirRoot)/Buildchain/gcc/lib/libm-2.13.so $(utilDirRoot)/Buildchain/gcc/lib/libgcc_s.so.1 $(utilDirRoot)/Buildchain/gcc/lib/libc-2.13.so -lc_nonshared $(utilDirRoot)/Buildchain/gcc/lib/libgcc_s.so.1 $(utilDirRoot)/Buildchain/gcc/lib/ld-2.13.so $(utilDirRoot)/Buildchain/gcc/lib/crtend.o $(utilDirRoot)/Buildchain/gcc/lib/crtn.o"

  root = "$(srcDirRoot)"

  files = {
    "$(srcDirRoot)/Modules/**.cpp" = cppSource,
    "$(srcDirRoot)/Modules/**.h",
    "$(srcDirRoot)/Platform/Common/**.cpp" = cppSource,
    "$(srcDirRoot)/Platform/Common/**.h",
    "$(srcDirRoot)/Platform/Linux/**.cpp" = cppSource,
    "$(srcDirRoot)/Platform/Linux/**.h",
    "$(srcDirRoot)/Platform/*.cpp" = cppSource,
    "$(srcDirRoot)/Platform/*.h",
    "$(srcDirRoot)/Processes/**.cpp" = cppSource,
    "$(srcDirRoot)/Processes/**.h",
    "$(srcDirRoot)/Representations/**.cpp" = cppSource,
    "$(srcDirRoot)/Representations/**.h",
    "$(srcDirRoot)/Tools/**.cpp" = cppSource,
    "$(srcDirRoot)/Tools/**.h",
  }

  defines += {
    "TARGET_ROBOT", "__STRICT_ANSI__"
    if (configuration == "Develop" || configuration == "DevEnC") { -"NDEBUG" }
  }

  output = "$(buildDir)/bhuman"

  includePaths = {
    "$(srcDirRoot)",
    "$(srcDirRoot)/Tools/Precompiled",
    "$(utilDirRoot)/Eigen",
    "$(utilDirRoot)/GameController/include",
    "$(utilDirRoot)/Buildchain/gcc/include",
    "$(utilDirRoot)/Buildchain/gcc/include/c++/5.2.0",
    "$(utilDirRoot)/Buildchain/gcc/include/c++/5.2.0/i686-pc-linux-gnu",
    "$(clanginclude)",
    "$(utilDirRoot)/fftw-3.3",
    "$(utilDirRoot)/libjpeg/src",
    "$(utilDirRoot)/snappy/include",
  }

  libPaths = {
    "$(utilDirRoot)/fftw-3.3/Linux32",
    "$(utilDirRoot)/libjpeg/lib/Linux",
    "$(utilDirRoot)/Buildchain/gcc/lib",
    "$(utilDirRoot)/snappy/lib/Linux/x86",
  }

  libs = {
    "rt-2.13", "jpeg-atom", "pthread-2.13", "pthread_nonshared", "fftw3", "snappy", "asound", "dl-2.13"
  }

  cppFlags += {
    "-nostdinc -nostdinc++ -march=atom -target i686-pc-linux-gnu"
    if (host == "Win32") { "-x c++" }
    if (tool != "vcxproj") {
      "-Wno-switch" // deactivating this is a problem because of the ENUM macro, since numOf<ENUM>s is never used in switch.
    }
    if (configuration == "Develop") {
      "-g1"
    }
  },

  linkFlags += "-nostdlib",

  if (tool == "vcxproj") {
    buildCommand = "bashexec \"echo \\\"`uname -o` --ignore-dependencies $(target) config=$(configuration) clanginclude=\\\\\\\"`for d in %24(clang++ -c -v -E - </dev/null 2>&1 | sed -n -e '/here:/,/^End/{/here:/d; /^End/d; p}'); do [ -f $$d/xmmintrin.h ] && echo $$d; done | head -n1`\\\\\\\"\\\" | sed 's@^Cygwin@$(winMarePath)@; s@^GNU\/Linux@$(linuxMarePath)@' | bash\""
    reBuildCommand = "bashexec \"echo \\\"`uname -o` --ignore-dependencies rebuild $(target) config=$(configuration) clanginclude=\\\\\\\"`for d in %24(clang++ -c -v -E - </dev/null 2>&1 | sed -n -e '/here:/,/^End/{/here:/d; /^End/d; p}'); do [ -f $$d/xmmintrin.h ] && echo $$d; done | head -n1`\\\\\\\"\\\" | sed 's@^Cygwin@$(winMarePath)@; s@^GNU\/Linux@$(linuxMarePath)@' | bash\""
    cleanCommand = "$(winMarePath) --ignore-dependencies clean $(target) config=$(configuration)"
  }
}
